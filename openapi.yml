openapi: 3.0.0

info:
  description: Krak REST API
  version: 0.0.1
  title: Krak REST API

servers:
  - url: /api

paths:
  /boreholes/:
    get:
      operationId: boreholes.read_all
      summary: Read all boreholes in db, sorted by id
      description: Read all boreholes in db, sorted by id
      tags:
        - Boreholes
      responses:
        "200":
          description: Successfully read boreholes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/boreholes"
    post:
      operationId: boreholes.create
      summary: Create a new borehole
      description: Create a new borehole
      tags:
        - Boreholes
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/boreholes"
        description: Borehole to create
        required: true
      responses:
        "201":
          description: Successfully created borehole
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/boreholes"
  /boreholes/{borehole_id}:
    parameters:
      - name: borehole_id
        in: path
        description: Id of the borehole to get
        required: true
        schema:
          type: integer
    get:
      operationId: boreholes.read_one
      summary: Read one borehole
      description: Read one borehole
      tags:
        - Boreholes
      responses:
        "200":
          description: Successfully read borehole from borehole data operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/boreholes"
    put:
      operationId: boreholes.update
      tags:
        - Boreholes
      summary: Update a borehole
      description: Update a borehole
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/boreholes"
      responses:
        "200":
          description: Successfully updated borehole
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/boreholes"
    delete:
      operationId: boreholes.delete
      summary: Delete a borehole
      description: Delete a borehole
      tags:
        - Boreholes
      responses:
        "200":
          description: Successfully deleted borehole
  /boreholes/{borehole_id}/core_photos/:
    parameters:
      - name: borehole_id
        in: path
        description: Id of Borehole
        required: true
        schema:
          type: integer
    get:
      operationId: core_photos.read_all
      summary: Read all core photo ids in db, sorted by id
      description: Read all core photo ids in db, sorted by id
      tags:
        - CorePhotos
      responses:
        "200":
          description: Successfully read all core photos
          content:
            multipart/form-data:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/core_photos"
    post:
      operationId: core_photos.create
      summary: Create a new core photo
      description: Create a new core photo
      tags:
        - CorePhotos
      requestBody:
        description: Core photo to create
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/core_photos"
            encoding:
              photo:
                contentType: image/*
              data:
                contentType: application/json
      responses:
        "201":
          description: Successfully created core photo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/core_photos"
  /boreholes/{borehole_id}/core_photos/{core_photo_id}:
    parameters:
      - name: borehole_id
        in: path
        description: Id of Borehole
        required: true
        schema:
          type: integer
      - name: core_photo_id
        in: path
        description: Id of Core Photo
        required: true
        schema:
          type: integer
    get:
      operationId: core_photos.read_one
      summary: Read one core photo
      description: Read one core photo
      tags:
        - CorePhotos
      responses:
        "200":
          description: Successfully read core photos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/core_photos"
    put:
      operationId: core_photos.update
      tags:
        - CorePhotos
      summary: Update a core_photo
      description: Update a core_photo
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/core_photos"
            encoding:
              photo:
                contentType: image/*
              data:
                contentType: application/json
      responses:
        "200":
          description: Successfully updated borehole
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/core_photos"
    delete:
      operationId: core_photos.delete
      summary: Delete a core_photo
      description: Delete a core_photo
      tags:
        - CorePhotos
      responses:
        "200":
          description: Successfully deleted borehole
  /boreholes/{borehole_id}/core_photos/{core_photo_id}/crop:
    parameters:
      - name: borehole_id
        in: path
        description: Id of Borehole
        required: true
        schema:
          type: integer
      - name: core_photo_id
        in: path
        description: Id of core photo
        required: true
        schema:
          type: integer
    get:
      operationId: core_photos.read_cropped
      summary: Read cropped core photo
      description: Read cropped core photo
      tags:
        - CorePhotos
      responses:
        "200":
          description: Successfully read cropped core photos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/crop"
    post:
      operationId: core_photos.crop
      summary: Crop a core photo
      description: Crop a core photo
      tags:
        - CorePhotos
      requestBody:
        description: Core photo to crop
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/crop"
      responses:
        "201":
          description: Successfully created core photo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/crop"

    put:
      operationId: core_photos.update_crop
      summary: re-crop a core photo
      description: re-crop a core photo
      tags:
        - CorePhotos
      requestBody:
        description: Core photo to crop
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/crop"
      responses:
        "200":
          description: Successfully re-cropped core photo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/crop"

components:
  schemas:
    boreholes:
      type: object
      required:
        - name
        - easting
        - northing
        - elevation
      properties:
        name:
          type: string
          description: Name of the borehole
        easting:
          type: number
          description: Easting position of the collar
        northing:
          type: number
          description: Northing position of the collar
        elevation:
          type: number
          description: Elevation position of the collar
    core_photos:
      type: object
      required:
        - photo
        - data
      properties:
        photo:
          type: string
          format: binary
        data:
          type: object
          required:
            - depth_from
            - depth_to
          properties:
            depth_from:
              type: number
            depth_to:
              type: number
    crop:
      type: array
      description: list of corner coordinates to crop the photo with
      minItems: 4
      maxItems: 4
      items:
        type: object
        description: 2d pixel coordinates (left, top)
        properties:
          left:
            type: number
          top:
            type: number
